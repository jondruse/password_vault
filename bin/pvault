#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'terminal-table'
require 'clipboard'
require 'password_vault'

program :version, '0.0.1'
program :description, 'store your passwords safely'

default_command :main

command :main do |c|
  c.syntax = 'Password Vault'
  c.summary = 'Interact with your password vault'
  c.action do |args, options|
    if !File.exists?(PasswordVault::VaultFile)
      p = ask("Please enter a password for your vault:  ") {|q| q.echo = false }
      vault = PasswordVault::Vault.new(p)
      vault.write
      vault.read
    else
      p = ask("Password:  ") { |q| q.echo = false }
      vault = PasswordVault::Vault.new(p)
    end

    begin
      vault.read
    rescue
      puts "you shall not pass!"
      exit
    end

    puts "type 'help' to see a list of commands"
    loop do
      input = ask_for_array("> ")
      c = input.first

      if %w(quit q).include?(c)
        break
      end

      case c
      when "list"
        rows = []
        vault.passwords.each do |p|
          rows << [
            p.name,
            p.username,
            p.url
          ]
        end

        table = Terminal::Table.new headings: ["Name","Username","URL"], rows: rows
        puts table
      when "add"
        p = PasswordVault::Password.new
        p.name = ask("Name:  ")

        if vault.get_password(p.name)
          puts "entry for #{p.name} already exists, use 'update'"
        else
          p.password = ask("Password:  ") { |q| q.echo = false }
          p.username = ask("Username:  ")
          p.url = ask("URL:  ")

          vault.passwords << p

          vault.write

          puts "added #{p.name} to vault"
        end
      when "copy"
        if input.size == 2
          p = vault.get_password(input.last)
          Clipboard.copy(p.password)
          puts "password for #{p.name} copied to your clipboard"
        else
          puts "you must supply exaclty one name to copy"
        end
      when "delete"
        if input.size == 2
          vault.delete_password(input.last)
          vault.write
          puts "deleted #{input.last}"
        else
          puts "you must supply exaclty one name to delete"
        end
      when "update"
        if input.size == 2
          p = vault.get_password(input.last)
          p.name = ask("Name:  ")
          p.password = ask("Password:  ") { |q| q.echo = false }
          p.username = ask("Username:  ")
          p.url = ask("URL:  ")
          vault.write
        else
          puts "you must supply exaclty one name to update"
        end
      when "help"

      else
        puts "#{c}: does not compute"
      end
    end


  end
end
